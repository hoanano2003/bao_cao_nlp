{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30716,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!rm /opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info -rdf","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:44:24.617715Z","iopub.execute_input":"2024-06-09T00:44:24.618387Z","iopub.status.idle":"2024-06-09T00:44:25.633872Z","shell.execute_reply.started":"2024-06-09T00:44:24.618354Z","shell.execute_reply":"2024-06-09T00:44:25.632674Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"!mkdir temp_env\n!cd temp_env\n!pip install requests==2.31.0 transformers==4.30 datasets torch accelerate evaluate","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:44:34.023695Z","iopub.execute_input":"2024-06-09T00:44:34.024068Z","iopub.status.idle":"2024-06-09T00:45:00.692667Z","shell.execute_reply.started":"2024-06-09T00:44:34.024034Z","shell.execute_reply":"2024-06-09T00:45:00.691739Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: requests==2.31.0 in /opt/conda/lib/python3.10/site-packages (2.31.0)\nCollecting transformers==4.30\n  Downloading transformers-4.30.0-py3-none-any.whl.metadata (113 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m113.6/113.6 kB\u001b[0m \u001b[31m1.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: datasets in /opt/conda/lib/python3.10/site-packages (2.19.1)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.1.2)\nRequirement already satisfied: accelerate in /opt/conda/lib/python3.10/site-packages (0.30.1)\nCollecting evaluate\n  Downloading evaluate-0.4.2-py3-none-any.whl.metadata (9.3 kB)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests==2.31.0) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests==2.31.0) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests==2.31.0) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests==2.31.0) (2024.2.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (3.13.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.14.1 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (0.23.2)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (6.0.1)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (2023.12.25)\nCollecting tokenizers!=0.11.3,<0.14,>=0.11.1 (from transformers==4.30)\n  Downloading tokenizers-0.13.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.7 kB)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (0.4.3)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers==4.30) (4.66.4)\nRequirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets) (14.0.2)\nRequirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets) (0.6)\nRequirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets) (0.3.8)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets) (2.2.1)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets) (0.70.16)\nRequirement already satisfied: fsspec<=2024.3.1,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.3.1,>=2023.1.0->datasets) (2024.3.1)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets) (3.9.5)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.2)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from accelerate) (5.9.3)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.9.3)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (4.0.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers==4.30) (3.1.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.3)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2023.4)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.16.0)\nDownloading transformers-4.30.0-py3-none-any.whl (7.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.2/7.2 MB\u001b[0m \u001b[31m26.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading evaluate-0.4.2-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.1/84.1 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tokenizers-0.13.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m69.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: tokenizers, transformers, evaluate\n  Attempting uninstall: tokenizers\n    Found existing installation: tokenizers 0.19.1\n    Uninstalling tokenizers-0.19.1:\n      Successfully uninstalled tokenizers-0.19.1\n  Attempting uninstall: transformers\n    Found existing installation: transformers 4.41.1\n    Uninstalling transformers-4.41.1:\n      Successfully uninstalled transformers-4.41.1\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nkaggle-environments 1.14.9 requires transformers>=4.33.1, but you have transformers 4.30.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed evaluate-0.4.2 tokenizers-0.13.3 transformers-4.30.0\n","output_type":"stream"}]},{"cell_type":"code","source":"from datasets import load_dataset, DatasetDict\nimport transformers\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM, AutoConfig\nimport torch\nimport accelerate\nfrom transformers import DataCollatorForSeq2Seq\nfrom transformers import TrainingArguments, Trainer\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:45:08.039057Z","iopub.execute_input":"2024-06-09T00:45:08.039387Z","iopub.status.idle":"2024-06-09T00:45:25.091939Z","shell.execute_reply.started":"2024-06-09T00:45:08.039357Z","shell.execute_reply":"2024-06-09T00:45:25.090615Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"2024-06-09 00:45:17.194072: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-09 00:45:17.194187: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-09 00:45:17.324326: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"from huggingface_hub import notebook_login\n\nnotebook_login()","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:45:30.696536Z","iopub.execute_input":"2024-06-09T00:45:30.697666Z","iopub.status.idle":"2024-06-09T00:45:30.723825Z","shell.execute_reply.started":"2024-06-09T00:45:30.697634Z","shell.execute_reply":"2024-06-09T00:45:30.723046Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"67479c3506fd48efb8573da6881badb0"}},"metadata":{}}]},{"cell_type":"code","source":"# Tải dataset\nraw_dataset = load_dataset('vietgpt/news_summarization_vi')","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:46:04.591307Z","iopub.execute_input":"2024-06-09T00:46:04.592127Z","iopub.status.idle":"2024-06-09T00:46:09.164802Z","shell.execute_reply.started":"2024-06-09T00:46:04.592086Z","shell.execute_reply":"2024-06-09T00:46:09.163946Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading readme:   0%|          | 0.00/6.77k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"096b819d96414a458d3f99aad95ccb8b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading data:   0%|          | 0.00/115M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8395f44142bf430d9297434a41ea76d3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading data:   0%|          | 0.00/1.77M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e77dda99d1a74aaea68601fdf88e1aed"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split:   0%|          | 0/65361 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"657a394eb29240b0a205d2fb12a14e30"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating test split:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"87a5964961bb41668b2d686bd72ec178"}},"metadata":{}}]},{"cell_type":"code","source":"# Trích xuất độ dài của các mẫu train content của raw_dataset\nlengths = []\nfor i in range(len(raw_dataset['train']['content'])):\n  lengths.append(len(raw_dataset['train'][i]['content'].split()))\n\n# Vẽ biểu đồ cột\nplt.hist(lengths, bins=20)  # Sử dụng histogram thay vì biểu đồ cột để hiển thị phân phối\nplt.title('Phân phối độ dài của các mẫu')\nplt.xlabel('Độ dài')\nplt.ylabel('Số lượng mẫu')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:46:15.971236Z","iopub.execute_input":"2024-06-09T00:46:15.971593Z","iopub.status.idle":"2024-06-09T00:46:24.620803Z","shell.execute_reply.started":"2024-06-09T00:46:15.971559Z","shell.execute_reply":"2024-06-09T00:46:24.619921Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Trích xuất độ dài của các mẫu train summury của raw_dataset\nlengths = []\nfor i in range(len(raw_dataset['train']['summary'])):\n  lengths.append(len(raw_dataset['train'][i]['summary'].split()))\n\n# Vẽ biểu đồ cột\nplt.hist(lengths, bins=20)  # Sử dụng histogram thay vì biểu đồ cột để hiển thị phân phối\nplt.title('Phân phối độ dài của các mẫu')\nplt.xlabel('Độ dài')\nplt.ylabel('Số lượng mẫu')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:46:30.036672Z","iopub.execute_input":"2024-06-09T00:46:30.037262Z","iopub.status.idle":"2024-06-09T00:46:36.364478Z","shell.execute_reply.started":"2024-06-09T00:46:30.037231Z","shell.execute_reply":"2024-06-09T00:46:36.363617Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"tokenizer = AutoTokenizer.from_pretrained(\"VietAI/vit5-base-vietnews-summarization\")\nconfig = AutoConfig.from_pretrained(\"VietAI/vit5-base-vietnews-summarization\")\n# config.early_stopping = False\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"VietAI/vit5-base-vietnews-summarization\", config = config)\ntorch.cuda.empty_cache()\nmodel.cuda()\nconfig.save_pretrained('path/config')","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:46:42.982193Z","iopub.execute_input":"2024-06-09T00:46:42.982601Z","iopub.status.idle":"2024-06-09T00:46:54.587904Z","shell.execute_reply.started":"2024-06-09T00:46:42.982562Z","shell.execute_reply":"2024-06-09T00:46:54.587166Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/2.20k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ccbe931e722a4bdf82a9c0da2b1384f7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"spiece.model:   0%|          | 0.00/820k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ad7f34e4193f4114ac235e38b8686ada"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/2.40M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3f2d5019b1764db5ad0827a623103cfb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/2.12k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cf0b2011943a4e969b85608131a0f074"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/702 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a138cff300714e1c98114e3d6221d312"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/904M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"42aaac8e948847d5a88ed2755f0d545b"}},"metadata":{}}]},{"cell_type":"code","source":"print(tokenizer)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:46:58.701382Z","iopub.execute_input":"2024-06-09T00:46:58.702365Z","iopub.status.idle":"2024-06-09T00:46:58.708756Z","shell.execute_reply.started":"2024-06-09T00:46:58.702331Z","shell.execute_reply":"2024-06-09T00:46:58.707772Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"T5TokenizerFast(name_or_path='VietAI/vit5-base-vietnews-summarization', vocab_size=36096, model_max_length=1000000000000000019884624838656, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'eos_token': '</s>', 'unk_token': '<unk>', 'pad_token': '<pad>', 'additional_special_tokens': ['<extra_id_0>', '<extra_id_1>', '<extra_id_2>', '<extra_id_3>', '<extra_id_4>', '<extra_id_5>', '<extra_id_6>', '<extra_id_7>', '<extra_id_8>', '<extra_id_9>', '<extra_id_10>', '<extra_id_11>', '<extra_id_12>', '<extra_id_13>', '<extra_id_14>', '<extra_id_15>', '<extra_id_16>', '<extra_id_17>', '<extra_id_18>', '<extra_id_19>', '<extra_id_20>', '<extra_id_21>', '<extra_id_22>', '<extra_id_23>', '<extra_id_24>', '<extra_id_25>', '<extra_id_26>', '<extra_id_27>', '<extra_id_28>', '<extra_id_29>', '<extra_id_30>', '<extra_id_31>', '<extra_id_32>', '<extra_id_33>', '<extra_id_34>', '<extra_id_35>', '<extra_id_36>', '<extra_id_37>', '<extra_id_38>', '<extra_id_39>', '<extra_id_40>', '<extra_id_41>', '<extra_id_42>', '<extra_id_43>', '<extra_id_44>', '<extra_id_45>', '<extra_id_46>', '<extra_id_47>', '<extra_id_48>', '<extra_id_49>', '<extra_id_50>', '<extra_id_51>', '<extra_id_52>', '<extra_id_53>', '<extra_id_54>', '<extra_id_55>', '<extra_id_56>', '<extra_id_57>', '<extra_id_58>', '<extra_id_59>', '<extra_id_60>', '<extra_id_61>', '<extra_id_62>', '<extra_id_63>', '<extra_id_64>', '<extra_id_65>', '<extra_id_66>', '<extra_id_67>', '<extra_id_68>', '<extra_id_69>', '<extra_id_70>', '<extra_id_71>', '<extra_id_72>', '<extra_id_73>', '<extra_id_74>', '<extra_id_75>', '<extra_id_76>', '<extra_id_77>', '<extra_id_78>', '<extra_id_79>', '<extra_id_80>', '<extra_id_81>', '<extra_id_82>', '<extra_id_83>', '<extra_id_84>', '<extra_id_85>', '<extra_id_86>', '<extra_id_87>', '<extra_id_88>', '<extra_id_89>', '<extra_id_90>', '<extra_id_91>', '<extra_id_92>', '<extra_id_93>', '<extra_id_94>', '<extra_id_95>']}, clean_up_tokenization_spaces=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"max_input_length = 768\nmax_target_length = 128\n\ndef preprocess_function(examples):\n    model_inputs = tokenizer(examples[\"content\"], max_length=max_input_length, padding=\"max_length\", truncation=True, return_tensors=\"pt\")\n    with tokenizer.as_target_tokenizer():\n        labels = tokenizer(examples[\"summary\"], max_length=max_target_length, padding=\"max_length\", truncation=True, return_tensors=\"pt\")\n\n    model_inputs[\"labels\"] = labels[\"input_ids\"]\n\n    return model_inputs\n\ntokenized_datasets = raw_dataset.map(\n    preprocess_function, batched=True, remove_columns=[\"content\", \"summary\"]\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:47:04.439793Z","iopub.execute_input":"2024-06-09T00:47:04.440618Z","iopub.status.idle":"2024-06-09T00:48:39.169827Z","shell.execute_reply.started":"2024-06-09T00:47:04.440580Z","shell.execute_reply":"2024-06-09T00:48:39.168931Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/65361 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a74112d919714ba0bc3dc01b47e3579a"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:3619: UserWarning: `as_target_tokenizer` is deprecated and will be removed in v5 of Transformers. You can tokenize your labels by using the argument `text_target` of the regular `__call__` method (either in the same call as your input texts if you use the same keyword arguments, or in a separate call.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6ee32b3277e946e190028d9bc0b5e535"}},"metadata":{}}]},{"cell_type":"code","source":"training_args = TrainingArguments(\n    output_dir=\"/kaggle/working/nlp_logs/test_trainer\",\n    hub_model_id=\"hoanano/text_summarization\",\n    learning_rate=1e-4,\n    num_train_epochs=1,\n    warmup_steps=500,\n    weight_decay=0.01,\n    # per_device_train_batch_size=4,  # Đặt kích thước batch cụ thể\n    # per_device_eval_batch_size=4,   # Đặt kích thước batch cụ thể\n    logging_dir='/kaggle/working/nlp_logs/logs',\n    auto_find_batch_size=True,\n    evaluation_strategy='epoch',\n    save_steps=500,\n    logging_steps=500,\n    save_total_limit=1,\n    push_to_hub=True,\n)\n\ntrainer = Trainer(\n    model = model,\n    tokenizer = tokenizer,\n    args = training_args,\n    train_dataset = tokenized_datasets['train'],\n    eval_dataset = tokenized_datasets['test']\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:57:36.076025Z","iopub.execute_input":"2024-06-09T00:57:36.076748Z","iopub.status.idle":"2024-06-09T00:57:41.064985Z","shell.execute_reply.started":"2024-06-09T00:57:36.076716Z","shell.execute_reply":"2024-06-09T00:57:41.064151Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_deprecation.py:131: FutureWarning: 'Repository' (from 'huggingface_hub.repository') is deprecated and will be removed from version '1.0'. Please prefer the http-based alternatives instead. Given its large adoption in legacy code, the complete removal is only planned on next major release.\nFor more details, please read https://huggingface.co/docs/huggingface_hub/concepts/git_vs_http.\n  warnings.warn(warning_message, FutureWarning)\nCloning https://huggingface.co/hoanano/text_summarization into local empty directory.\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.cuda.empty_cache()","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:57:53.131601Z","iopub.execute_input":"2024-06-09T00:57:53.132308Z","iopub.status.idle":"2024-06-09T00:57:53.136670Z","shell.execute_reply.started":"2024-06-09T00:57:53.132276Z","shell.execute_reply":"2024-06-09T00:57:53.135570Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"trainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-06-09T00:57:58.420490Z","iopub.execute_input":"2024-06-09T00:57:58.420898Z","iopub.status.idle":"2024-06-09T03:52:34.843654Z","shell.execute_reply.started":"2024-06-09T00:57:58.420871Z","shell.execute_reply":"2024-06-09T03:52:34.842736Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/optimization.py:411: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"wandb version 0.17.1 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.17.0"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240609_005849-xgwdlw12</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/hoanano/huggingface/runs/xgwdlw12' target=\"_blank\">whole-sun-8</a></strong> to <a href='https://wandb.ai/hoanano/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/hoanano/huggingface' target=\"_blank\">https://wandb.ai/hoanano/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/hoanano/huggingface/runs/xgwdlw12' target=\"_blank\">https://wandb.ai/hoanano/huggingface/runs/xgwdlw12</a>"},"metadata":{}},{"name":"stderr","text":"You're using a T5TokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='8171' max='8171' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [8171/8171 2:53:22, Epoch 1/1]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.602400</td>\n      <td>0.537262</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=8171, training_loss=0.7032949447398407, metrics={'train_runtime': 10403.8727, 'train_samples_per_second': 6.282, 'train_steps_per_second': 0.785, 'total_flos': 5.970314502733824e+16, 'train_loss': 0.7032949447398407, 'epoch': 1.0})"},"metadata":{}}]},{"cell_type":"code","source":"# Lưu model và tokenizer\nmodel.save_pretrained(\"/kaggle/working/finetunedmodel\")\ntokenizer.save_pretrained(\"/kaggle/working/finetunedmodel\")","metadata":{"execution":{"iopub.status.busy":"2024-06-09T03:57:48.330709Z","iopub.execute_input":"2024-06-09T03:57:48.331504Z","iopub.status.idle":"2024-06-09T03:57:49.759482Z","shell.execute_reply.started":"2024-06-09T03:57:48.331467Z","shell.execute_reply":"2024-06-09T03:57:49.758218Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"('/kaggle/working/finetunedmodel/tokenizer_config.json',\n '/kaggle/working/finetunedmodel/special_tokens_map.json',\n '/kaggle/working/finetunedmodel/spiece.model',\n '/kaggle/working/finetunedmodel/added_tokens.json',\n '/kaggle/working/finetunedmodel/tokenizer.json')"},"metadata":{}}]},{"cell_type":"code","source":"# model.push_to_hub()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import AutoModelForSeq2SeqLM, AutoTokenizer\n\n# Tải lại model và tokenizer\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"/kaggle/working/finetunedmodel\")\ntokenizer = AutoTokenizer.from_pretrained(\"/kaggle/working/finetunedmodel\")\nmodel.cuda()\n\nsentence = raw_dataset['test'][1]['content']\nsentence = sentence + \"</s>\"\ninput_encoding = tokenizer(sentence, max_length=768, padding=\"max_length\", truncation=True, return_tensors=\"pt\")\noutputs = model.generate(\n    input_ids=input_encoding['input_ids'].to(\"cuda\"),\n    attention_mask=input_encoding['attention_mask'].to(\"cuda\"),\n    min_length = 30,\n    max_length=128,\n    early_stopping=True\n)\nfor output in outputs:\n    line = tokenizer.decode(output, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n    print(line)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T03:58:25.380179Z","iopub.execute_input":"2024-06-09T03:58:25.381020Z","iopub.status.idle":"2024-06-09T03:58:32.507702Z","shell.execute_reply.started":"2024-06-09T03:58:25.380974Z","shell.execute_reply":"2024-06-09T03:58:32.506786Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"ga Sài Gòn sẽ tăng 10% giá vé tàu Tết nguyên đán Nhâm Thìn 2012 từ 8h ngày 15/11/2011, giảm 79% chiều từ Hà Nội đi Sài Gòn trong giai đoạn trước Tết, giảm 50% chiều từ Sài Gòn đi Hà Nội giai đoạn sau Tết. Thời gian cao điểm áp dụng đối với tàu số chẵn chạy trước Tết từ 0h ngày 14/01/2012 đến hết 24h ngày 21/01/2012. Sau ngày 10/12/2011,\n","output_type":"stream"}]},{"cell_type":"code","source":"print(raw_dataset['test'][1]['summary'])","metadata":{"execution":{"iopub.status.busy":"2024-06-09T03:58:43.267752Z","iopub.execute_input":"2024-06-09T03:58:43.268159Z","iopub.status.idle":"2024-06-09T03:58:43.276191Z","shell.execute_reply.started":"2024-06-09T03:58:43.268130Z","shell.execute_reply":"2024-06-09T03:58:43.275045Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Ga Sài Gòn sẽ tăng giá vé tàu tết năm nay lên 10%, và từ 19% đến 39% giá vé trong thời gian cao điểm. Đường sắt Việt Nam cũng áp dụng việc giảm giá vé cho các chiều vắng khách, giảm 79% chiều từ Hà Nội đi Sài Gòn trước Tết và 50% chiều từ Sài Gòn đi Hà Nội sau Tết. Ga Sài Gòn sẽ bán vé tàu Tết từ ngày 15/11/2011 trên mạng và từ ngày 10/12/2011 thu hồi các chỗ còn lại.\n","output_type":"stream"}]},{"cell_type":"code","source":"import evaluate\nimport locale\nlocale.getpreferredencoding = lambda: \"UTF-8\"","metadata":{"execution":{"iopub.status.busy":"2024-06-09T03:59:46.253899Z","iopub.execute_input":"2024-06-09T03:59:46.254245Z","iopub.status.idle":"2024-06-09T03:59:47.756742Z","shell.execute_reply.started":"2024-06-09T03:59:46.254219Z","shell.execute_reply":"2024-06-09T03:59:47.755612Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"!pip install rouge_score","metadata":{"execution":{"iopub.status.busy":"2024-06-09T03:59:51.494635Z","iopub.execute_input":"2024-06-09T03:59:51.494973Z","iopub.status.idle":"2024-06-09T04:00:07.131642Z","shell.execute_reply.started":"2024-06-09T03:59:51.494948Z","shell.execute_reply":"2024-06-09T04:00:07.130458Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":18,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nCollecting rouge_score\n  Downloading rouge_score-0.1.2.tar.gz (17 kB)\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: absl-py in /opt/conda/lib/python3.10/site-packages (from rouge_score) (1.4.0)\nRequirement already satisfied: nltk in /opt/conda/lib/python3.10/site-packages (from rouge_score) (3.2.4)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from rouge_score) (1.26.4)\nRequirement already satisfied: six>=1.14.0 in /opt/conda/lib/python3.10/site-packages (from rouge_score) (1.16.0)\nBuilding wheels for collected packages: rouge_score\n  Building wheel for rouge_score (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for rouge_score: filename=rouge_score-0.1.2-py3-none-any.whl size=24934 sha256=a900f1dc5add21b4f534d925296959a2284ae8ded966e306156122b39dcc1620\n  Stored in directory: /root/.cache/pip/wheels/5f/dd/89/461065a73be61a532ff8599a28e9beef17985c9e9c31e541b4\nSuccessfully built rouge_score\nInstalling collected packages: rouge_score\nSuccessfully installed rouge_score-0.1.2\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = []\nfor sample in raw_dataset[\"test\"]:\n  input_text = sample[\"content\"]\n  input_encoding = tokenizer(input_text, max_length=768, padding = \"max_length\", truncation=True, return_tensors=\"pt\")\n  output = model.generate(\n      input_ids=input_encoding['input_ids'].to(\"cuda\"),\n      attention_mask=input_encoding['attention_mask'].to(\"cuda\"),\n      min_length = 30,\n      max_length=128,\n      early_stopping=True\n  )\n  generated_summary = tokenizer.decode(output[0],  skip_special_tokens=True, clean_up_tokenization_spaces=True)\n  predictions.append(generated_summary)\n\nreferences = [sample[\"summary\"] for sample in raw_dataset[\"test\"]]","metadata":{"execution":{"iopub.status.busy":"2024-06-09T04:01:11.725582Z","iopub.execute_input":"2024-06-09T04:01:11.726189Z","iopub.status.idle":"2024-06-09T04:32:42.023413Z","shell.execute_reply.started":"2024-06-09T04:01:11.726158Z","shell.execute_reply":"2024-06-09T04:32:42.022358Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"rouge = evaluate.load('rouge')\nresults = rouge.compute(predictions=predictions,references=references)\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T04:37:16.078533Z","iopub.execute_input":"2024-06-09T04:37:16.079188Z","iopub.status.idle":"2024-06-09T04:37:47.731476Z","shell.execute_reply.started":"2024-06-09T04:37:16.079153Z","shell.execute_reply":"2024-06-09T04:37:47.729981Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/6.27k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b7eed25ec5724c93b9ceaa5166875d08"}},"metadata":{}},{"name":"stdout","text":"{'rouge1': 0.7101828256623033, 'rouge2': 0.5035906752264818, 'rougeL': 0.5177342600203664, 'rougeLsum': 0.5191147684743631}\n","output_type":"stream"}]}]}